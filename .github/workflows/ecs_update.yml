name: ECS Update

on:
  workflow_dispatch: # Trigger this workflow manually

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: aws

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        IMAGE_TAG: latest
      run: |
        cd application
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    # TODO: update secrets with terraform backend bucket and info
    - name: Fetch Terraform State
      run: |
        aws s3 cp s3://my-tfstate-bucket-001/terraform.tfstate terraform.tfstate

    - name: Update ECS Service with new image
      id: update-ecs
      run: |
        NEW_IMAGE="${{ steps.build-image.outputs.image }}"
        CLUSTER_NAME=$(jq -r '.resources[] | select(.type=="aws_ecs_cluster") | .instances[0].attributes.name' terraform.tfstate)
        SERVICE_NAME=$(jq -r '.resources[] | select(.type=="aws_ecs_service") | .instances[0].attributes.name' terraform.tfstate)

        TASK_DEF_ARN=$(aws ecs describe-services \
          --cluster $CLUSTER_NAME \
          --services $SERVICE_NAME \
          --query "services[0].taskDefinition" \
          --output text)

        if [ "$TASK_DEF_ARN" == "None" ]; then
          exit 1
        fi

        TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $TASK_DEF_ARN)

        # Update container image and remove unsupported fields
        CONTAINER_DEF=$(jq --arg IMAGE "$NEW_IMAGE" \
          '.taskDefinition.containerDefinitions[0] |= (.image = $IMAGE)' <<< "$TASK_DEFINITION")
        NEW_TASK_DEF=$(jq '.taskDefinition | 
          del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .registeredAt, .registeredBy, .compatibilities)' <<< "$CONTAINER_DEF")

        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEF" | jq -r '.taskDefinition.taskDefinitionArn')

        aws ecs update-service \
          --cluster $CLUSTER_NAME \
          --service $SERVICE_NAME \
          --task-definition $NEW_TASK_DEF_ARN

    - name: Verify Deployment
      run: |
        aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME
