name: "ECR-ECS-GH-Deployment"

'on':
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      parameter-name:
        description: 'Start Manual Workflow'
        required: true

jobs:
  ci:
    name: "ECR-ECS-GH-Integration"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout Code"
        uses: "actions/checkout@v2"

      - name: "Lint code"
        run: |
          echo "Linting repository"

      - name: "Run unit tests"
        run: |
          echo "Running unit tests"

  cd:
    name: "ECR-ECS-GH-Deployment"
    runs-on: "ubuntu-latest"
    needs:
      - ci
    steps:
      - name: "Checkout Code"
        uses: "actions/checkout@v2"

      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: "Download Terraform State from S3"
        run: |
          aws s3 cp s3://my-tfstate-bucket-001/terraform.tfstate terraform.tfstate

      - name: "Parse ECS Cluster, Task Definition, and Service from tfstate"
        id: parse-tfstate
        run: |
          export ECS_CLUSTER=$(jq -r '.resources[] | select(.type=="aws_ecs_cluster") | .instances[].attributes.name' terraform.tfstate)
          export ECS_SERVICE=$(jq -r '.resources[] | select(.type=="aws_ecs_service") | .instances[].attributes.name' terraform.tfstate)
          export TASK_DEFINITION=$(jq -r '.resources[] | select(.type=="aws_ecs_task_definition") | .instances[].attributes.family' terraform.tfstate)
          echo "ECS_CLUSTER=$ECS_CLUSTER"
          echo "ECS_SERVICE=$ECS_SERVICE"
          echo "TASK_DEFINITION=$TASK_DEFINITION"
          echo "::set-output name=ecs-cluster::$ECS_CLUSTER"
          echo "::set-output name=ecs-service::$ECS_SERVICE"
          echo "::set-output name=task-definition::$TASK_DEFINITION"

      - name: "Login to Amazon ECR"
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: "Build, tag, and push image to Amazon ECR"
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: "Download task definition"
        run: |
          aws ecs describe-task-definition --task-definition ${{ steps.parse-tfstate.outputs.task-definition }} --query taskDefinition > task-definition.json

      - name: "Fill in the new image ID in the Amazon ECS task definition"
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: application
          image: ${{ steps.build-image.outputs.image }}

      - name: "Deploy Amazon ECS task definition"
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ steps.parse-tfstate.outputs.ecs-service }}
          cluster: ${{ steps.parse-tfstate.outputs.ecs-cluster }}
          wait-for-service-stability: true
